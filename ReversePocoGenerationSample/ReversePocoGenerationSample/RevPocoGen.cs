

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "ReversePocoGenerationSample\App.config"
//     Connection String Name: "SurveydbContext"
//     Connection String:      "Data Source=lenovo-pc;Initial Catalog=Surveydb;Persist Security Info=True;User ID=sa;password=**zapped**;;MultipleActiveResultSets=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Enterprise Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace ReversePocoGenerationSample
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Answer> Answers { get; set; } // Answer
        System.Data.Entity.DbSet<AnswerComment> AnswerComments { get; set; } // AnswerComment
        System.Data.Entity.DbSet<Group> Groups { get; set; } // Group
        System.Data.Entity.DbSet<GroupSurvey> GroupSurveys { get; set; } // GroupSurvey
        System.Data.Entity.DbSet<MatrixCol> MatrixCols { get; set; } // MatrixCol
        System.Data.Entity.DbSet<MatrixRow> MatrixRows { get; set; } // MatrixRow
        System.Data.Entity.DbSet<MenuItem> MenuItems { get; set; } // MenuItem
        System.Data.Entity.DbSet<OptionChoice> OptionChoices { get; set; } // OptionChoice
        System.Data.Entity.DbSet<OptionError> OptionErrors { get; set; } // OptionError
        System.Data.Entity.DbSet<Organization> Organizations { get; set; } // Organization
        System.Data.Entity.DbSet<PredefinedDropdown> PredefinedDropdowns { get; set; } // PredefinedDropdown
        System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        System.Data.Entity.DbSet<QuestionOption> QuestionOptions { get; set; } // QuestionOption
        System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; } // QuestionType
        System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        System.Data.Entity.DbSet<Rule> Rules { get; set; } // Rule
        System.Data.Entity.DbSet<Survey> Surveys { get; set; } // Survey
        System.Data.Entity.DbSet<SurveyComment> SurveyComments { get; set; } // SurveyComment
        System.Data.Entity.DbSet<Surveyee> Surveyees { get; set; } // Surveyee
        System.Data.Entity.DbSet<SurveyeeSurveyComment> SurveyeeSurveyComments { get; set; } // SurveyeeSurveyComment
        System.Data.Entity.DbSet<SurveySection> SurveySections { get; set; } // SurveySection
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<Tablet> Tablets { get; set; } // Tablet
        System.Data.Entity.DbSet<User> Users { get; set; } // User
        System.Data.Entity.DbSet<UserGroup> UserGroups { get; set; } // UserGroup
        System.Data.Entity.DbSet<UserTablet> UserTablets { get; set; } // UserTablet

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Answer> Answers { get; set; } // Answer
        public System.Data.Entity.DbSet<AnswerComment> AnswerComments { get; set; } // AnswerComment
        public System.Data.Entity.DbSet<Group> Groups { get; set; } // Group
        public System.Data.Entity.DbSet<GroupSurvey> GroupSurveys { get; set; } // GroupSurvey
        public System.Data.Entity.DbSet<MatrixCol> MatrixCols { get; set; } // MatrixCol
        public System.Data.Entity.DbSet<MatrixRow> MatrixRows { get; set; } // MatrixRow
        public System.Data.Entity.DbSet<MenuItem> MenuItems { get; set; } // MenuItem
        public System.Data.Entity.DbSet<OptionChoice> OptionChoices { get; set; } // OptionChoice
        public System.Data.Entity.DbSet<OptionError> OptionErrors { get; set; } // OptionError
        public System.Data.Entity.DbSet<Organization> Organizations { get; set; } // Organization
        public System.Data.Entity.DbSet<PredefinedDropdown> PredefinedDropdowns { get; set; } // PredefinedDropdown
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        public System.Data.Entity.DbSet<QuestionOption> QuestionOptions { get; set; } // QuestionOption
        public System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; } // QuestionType
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<Rule> Rules { get; set; } // Rule
        public System.Data.Entity.DbSet<Survey> Surveys { get; set; } // Survey
        public System.Data.Entity.DbSet<SurveyComment> SurveyComments { get; set; } // SurveyComment
        public System.Data.Entity.DbSet<Surveyee> Surveyees { get; set; } // Surveyee
        public System.Data.Entity.DbSet<SurveyeeSurveyComment> SurveyeeSurveyComments { get; set; } // SurveyeeSurveyComment
        public System.Data.Entity.DbSet<SurveySection> SurveySections { get; set; } // SurveySection
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<Tablet> Tablets { get; set; } // Tablet
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<UserGroup> UserGroups { get; set; } // UserGroup
        public System.Data.Entity.DbSet<UserTablet> UserTablets { get; set; } // UserTablet

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=SurveydbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AnswerConfiguration());
            modelBuilder.Configurations.Add(new AnswerCommentConfiguration());
            modelBuilder.Configurations.Add(new GroupConfiguration());
            modelBuilder.Configurations.Add(new GroupSurveyConfiguration());
            modelBuilder.Configurations.Add(new MatrixColConfiguration());
            modelBuilder.Configurations.Add(new MatrixRowConfiguration());
            modelBuilder.Configurations.Add(new MenuItemConfiguration());
            modelBuilder.Configurations.Add(new OptionChoiceConfiguration());
            modelBuilder.Configurations.Add(new OptionErrorConfiguration());
            modelBuilder.Configurations.Add(new OrganizationConfiguration());
            modelBuilder.Configurations.Add(new PredefinedDropdownConfiguration());
            modelBuilder.Configurations.Add(new QuestionConfiguration());
            modelBuilder.Configurations.Add(new QuestionOptionConfiguration());
            modelBuilder.Configurations.Add(new QuestionTypeConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new RuleConfiguration());
            modelBuilder.Configurations.Add(new SurveyConfiguration());
            modelBuilder.Configurations.Add(new SurveyCommentConfiguration());
            modelBuilder.Configurations.Add(new SurveyeeConfiguration());
            modelBuilder.Configurations.Add(new SurveyeeSurveyCommentConfiguration());
            modelBuilder.Configurations.Add(new SurveySectionConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TabletConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserGroupConfiguration());
            modelBuilder.Configurations.Add(new UserTabletConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new AnswerCommentConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new MatrixColConfiguration(schema));
            modelBuilder.Configurations.Add(new MatrixRowConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuItemConfiguration(schema));
            modelBuilder.Configurations.Add(new OptionChoiceConfiguration(schema));
            modelBuilder.Configurations.Add(new OptionErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new OrganizationConfiguration(schema));
            modelBuilder.Configurations.Add(new PredefinedDropdownConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionOptionConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new RuleConfiguration(schema));
            modelBuilder.Configurations.Add(new SurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new SurveyCommentConfiguration(schema));
            modelBuilder.Configurations.Add(new SurveyeeConfiguration(schema));
            modelBuilder.Configurations.Add(new SurveyeeSurveyCommentConfiguration(schema));
            modelBuilder.Configurations.Add(new SurveySectionConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TabletConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new UserTabletConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Answer> Answers { get; set; }
        public System.Data.Entity.DbSet<AnswerComment> AnswerComments { get; set; }
        public System.Data.Entity.DbSet<Group> Groups { get; set; }
        public System.Data.Entity.DbSet<GroupSurvey> GroupSurveys { get; set; }
        public System.Data.Entity.DbSet<MatrixCol> MatrixCols { get; set; }
        public System.Data.Entity.DbSet<MatrixRow> MatrixRows { get; set; }
        public System.Data.Entity.DbSet<MenuItem> MenuItems { get; set; }
        public System.Data.Entity.DbSet<OptionChoice> OptionChoices { get; set; }
        public System.Data.Entity.DbSet<OptionError> OptionErrors { get; set; }
        public System.Data.Entity.DbSet<Organization> Organizations { get; set; }
        public System.Data.Entity.DbSet<PredefinedDropdown> PredefinedDropdowns { get; set; }
        public System.Data.Entity.DbSet<Question> Questions { get; set; }
        public System.Data.Entity.DbSet<QuestionOption> QuestionOptions { get; set; }
        public System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<Rule> Rules { get; set; }
        public System.Data.Entity.DbSet<Survey> Surveys { get; set; }
        public System.Data.Entity.DbSet<SurveyComment> SurveyComments { get; set; }
        public System.Data.Entity.DbSet<Surveyee> Surveyees { get; set; }
        public System.Data.Entity.DbSet<SurveyeeSurveyComment> SurveyeeSurveyComments { get; set; }
        public System.Data.Entity.DbSet<SurveySection> SurveySections { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<Tablet> Tablets { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserGroup> UserGroups { get; set; }
        public System.Data.Entity.DbSet<UserTablet> UserTablets { get; set; }

        public FakeMyDbContext()
        {
            Answers = new FakeDbSet<Answer>("AnswerId");
            AnswerComments = new FakeDbSet<AnswerComment>("QuestionCommentId");
            Groups = new FakeDbSet<Group>("GroupId");
            GroupSurveys = new FakeDbSet<GroupSurvey>("GroupSurveyId");
            MatrixCols = new FakeDbSet<MatrixCol>("ColumnId");
            MatrixRows = new FakeDbSet<MatrixRow>("RowId");
            MenuItems = new FakeDbSet<MenuItem>("Id");
            OptionChoices = new FakeDbSet<OptionChoice>("OptionChoiceId");
            OptionErrors = new FakeDbSet<OptionError>("OptionErrorId");
            Organizations = new FakeDbSet<Organization>("OrganizationId");
            PredefinedDropdowns = new FakeDbSet<PredefinedDropdown>("PredefinedDropdownId");
            Questions = new FakeDbSet<Question>("QuestionId");
            QuestionOptions = new FakeDbSet<QuestionOption>("QuestionOptionId");
            QuestionTypes = new FakeDbSet<QuestionType>("QuestionTypeId");
            Roles = new FakeDbSet<Role>("RoleId");
            Rules = new FakeDbSet<Rule>("RuleId");
            Surveys = new FakeDbSet<Survey>("SurveyId");
            SurveyComments = new FakeDbSet<SurveyComment>("SurveyCommentsId");
            Surveyees = new FakeDbSet<Surveyee>("SurveyeeGuid");
            SurveyeeSurveyComments = new FakeDbSet<SurveyeeSurveyComment>("CommentId");
            SurveySections = new FakeDbSet<SurveySection>("SectionId");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            Tablets = new FakeDbSet<Tablet>("TabletId");
            Users = new FakeDbSet<User>("UserId");
            UserGroups = new FakeDbSet<UserGroup>("UserGroupId");
            UserTablets = new FakeDbSet<UserTablet>("UserTabletId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Answer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Answer
    {
        public int AnswerId { get; set; } // AnswerId (Primary key)
        public int? QuestionId { get; set; } // QuestionId
        public int? QuestionOptionId { get; set; } // QuestionOptionId
        public string AnswerValue { get; set; } // AnswerValue
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool? IsDeleted { get; set; } // IsDeleted
        public string Comment { get; set; } // Comment
        public string SurveyeeGuid { get; set; } // SurveyeeGuid (length: 36)
        public int? MatrixColId { get; set; } // MatrixColId
        public int? MatrixRowId { get; set; } // MatrixRowId

        // Foreign keys
        public virtual Question Question { get; set; } // FK_Answer_Question
        public virtual QuestionOption QuestionOption { get; set; } // FK_Answer_QuestionOption

        public Answer()
        {
            CreatedOn = System.DateTime.Now;
        }
    }

    // AnswerComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class AnswerComment
    {
        public int QuestionCommentId { get; set; } // QuestionCommentId (Primary key)
        public int? QuestionId { get; set; } // QuestionId
        public string Comment { get; set; } // Comment
        public string SurveyeeGuid { get; set; } // SurveyeeGuid (length: 36)
    }

    // Group
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Group
    {
        public int GroupId { get; set; } // GroupId (Primary key)
        public string Code { get; set; } // Code
        public string Name { get; set; } // Name
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<GroupSurvey> GroupSurveys { get; set; } // GroupSurvey.FK_dbo.GroupSurvey_dbo.Group_GroupId
        public virtual System.Collections.Generic.ICollection<UserGroup> UserGroups { get; set; } // UserGroup.FK_dbo.UserGroup_dbo.Group_GroupId

        public Group()
        {
            GroupSurveys = new System.Collections.Generic.List<GroupSurvey>();
            UserGroups = new System.Collections.Generic.List<UserGroup>();
        }
    }

    // GroupSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class GroupSurvey
    {
        public int GroupSurveyId { get; set; } // GroupSurveyId (Primary key)
        public int GroupId { get; set; } // GroupId
        public int SurveyId { get; set; } // SurveyId
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Foreign keys
        public virtual Group Group { get; set; } // FK_dbo.GroupSurvey_dbo.Group_GroupId
        public virtual Survey Survey { get; set; } // FK_dbo.GroupSurvey_dbo.Survey_SurveyId
    }

    // MatrixCol
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MatrixCol
    {
        public int ColumnId { get; set; } // ColumnId (Primary key)
        public string ColumnLabel { get; set; } // ColumnLabel
        public int QuestionId { get; set; } // QuestionId
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn

        // Foreign keys
        public virtual Question Question { get; set; } // FK_dbo.MatrixCol_dbo.Question_QuestionId
    }

    // MatrixRow
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MatrixRow
    {
        public int RowId { get; set; } // RowId (Primary key)
        public string RowLabel { get; set; } // RowLabel
        public int QuestionId { get; set; } // QuestionId
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn

        // Foreign keys
        public virtual Question Question { get; set; } // FK_dbo.MatrixRow_dbo.Question_QuestionId
    }

    // MenuItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MenuItem
    {
        public int Id { get; set; } // Id (Primary key)
        public string Action { get; set; } // Action
        public string Controller { get; set; } // Controller
        public string LinkText { get; set; } // LinkText
        public int ModuleId { get; set; } // ModuleId
        public int? ParentId { get; set; } // ParentId
    }

    // OptionChoice
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class OptionChoice
    {
        public int OptionChoiceId { get; set; } // OptionChoiceId (Primary key)
        public string OptionChoiceLabel { get; set; } // OptionChoiceLabel
        public bool IsDropdown { get; set; } // IsDropdown
    }

    // OptionError
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class OptionError
    {
        public int OptionErrorId { get; set; } // OptionErrorId (Primary key)
        public int QuestionOptionId { get; set; } // QuestionOptionId
        public string ErrorText { get; set; } // ErrorText
    }

    // Organization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Organization
    {
        public int OrganizationId { get; set; } // OrganizationId (Primary key)
        public string Name { get; set; } // Name
        public string Logo { get; set; } // Logo
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Survey> Surveys { get; set; } // Survey.FK_dbo.Survey_dbo.Organization_OrganizationId

        public Organization()
        {
            Surveys = new System.Collections.Generic.List<Survey>();
        }
    }

    // PredefinedDropdown
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class PredefinedDropdown
    {
        public int PredefinedDropdownId { get; set; } // PredefinedDropdownId (Primary key)
        public string Name { get; set; } // Name
        public string TableName { get; set; } // TableName
        public string ColumnName { get; set; } // ColumnName
    }

    // Question
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Question
    {
        public int QuestionId { get; set; } // QuestionId (Primary key)
        public int PrecedingQuestionId { get; set; } // PrecedingQuestionId
        public string Code { get; set; } // Code
        public string QuestionText { get; set; } // QuestionText
        public bool Required { get; set; } // Required
        public bool OnlyNumericValue { get; set; } // OnlyNumericValue
        public bool IncludeComment { get; set; } // IncludeComment
        public string Comment { get; set; } // Comment
        public int QuestionOrder { get; set; } // QuestionOrder
        public int DependentQuestionId { get; set; } // DependentQuestionId
        public int DependentQuestionOptionId { get; set; } // DependentQuestionOptionId
        public bool AllowMultipleChoice { get; set; } // AllowMultipleChoice
        public int JumpQuestionId { get; set; } // JumpQuestionId
        public int JumpQuestionOptionId { get; set; } // JumpQuestionOptionId
        public bool HasPredefinedDropdown { get; set; } // HasPredefinedDropdown
        public int PredefinedDropdownId { get; set; } // PredefinedDropdownId
        public int SectionId { get; set; } // SectionId
        public int QuestionTypeId { get; set; } // QuestionTypeId
        public int RuleId { get; set; } // RuleId
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted
        public bool IsUpdated { get; set; } // IsUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Answer> Answers { get; set; } // Answer.FK_Answer_Question
        public virtual System.Collections.Generic.ICollection<MatrixCol> MatrixCols { get; set; } // MatrixCol.FK_dbo.MatrixCol_dbo.Question_QuestionId
        public virtual System.Collections.Generic.ICollection<MatrixRow> MatrixRows { get; set; } // MatrixRow.FK_dbo.MatrixRow_dbo.Question_QuestionId
        public virtual System.Collections.Generic.ICollection<QuestionOption> QuestionOptions { get; set; } // QuestionOption.FK_dbo.QuestionOption_dbo.Question_QuestionId

        // Foreign keys
        public virtual QuestionType QuestionType { get; set; } // FK_dbo.Question_dbo.QuestionType_QuestionTypeId
        public virtual SurveySection SurveySection { get; set; } // FK_dbo.Question_dbo.SurveySection_SectionId

        public Question()
        {
            Answers = new System.Collections.Generic.List<Answer>();
            MatrixCols = new System.Collections.Generic.List<MatrixCol>();
            MatrixRows = new System.Collections.Generic.List<MatrixRow>();
            QuestionOptions = new System.Collections.Generic.List<QuestionOption>();
        }
    }

    // QuestionOption
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class QuestionOption
    {
        public int QuestionOptionId { get; set; } // QuestionOptionId (Primary key)
        public string OptionChoiceLabel { get; set; } // OptionChoiceLabel
        public bool IsDropdown { get; set; } // IsDropdown
        public int QuestionId { get; set; } // QuestionId
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Answer> Answers { get; set; } // Answer.FK_Answer_QuestionOption

        // Foreign keys
        public virtual Question Question { get; set; } // FK_dbo.QuestionOption_dbo.Question_QuestionId

        public QuestionOption()
        {
            Answers = new System.Collections.Generic.List<Answer>();
        }
    }

    // QuestionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class QuestionType
    {
        public int QuestionTypeId { get; set; } // QuestionTypeId (Primary key)
        public string Type { get; set; } // Type

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Question.FK_dbo.Question_dbo.QuestionType_QuestionTypeId

        public QuestionType()
        {
            Questions = new System.Collections.Generic.List<Question>();
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Role
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string RoleName { get; set; } // RoleName
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // Many to many mapping

        public Role()
        {
            Users = new System.Collections.Generic.List<User>();
        }
    }

    // Rule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Rule
    {
        public int RuleId { get; set; } // RuleId (Primary key)
        public string Name { get; set; } // Name
        public string Description { get; set; } // Description
    }

    // Survey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Survey
    {
        public int SurveyId { get; set; } // SurveyId (Primary key)
        public string UniqueId { get; set; } // UniqueId
        public string Name { get; set; } // Name
        public string Description { get; set; } // Description
        public string Logo { get; set; } // Logo
        public int OrganizationId { get; set; } // OrganizationId
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<GroupSurvey> GroupSurveys { get; set; } // GroupSurvey.FK_dbo.GroupSurvey_dbo.Survey_SurveyId
        public virtual System.Collections.Generic.ICollection<SurveySection> SurveySections { get; set; } // SurveySection.FK_dbo.SurveySection_dbo.Survey_SurveyId

        // Foreign keys
        public virtual Organization Organization { get; set; } // FK_dbo.Survey_dbo.Organization_OrganizationId

        public Survey()
        {
            GroupSurveys = new System.Collections.Generic.List<GroupSurvey>();
            SurveySections = new System.Collections.Generic.List<SurveySection>();
        }
    }

    // SurveyComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveyComment
    {
        public int SurveyCommentsId { get; set; } // SurveyCommentsId (Primary key)
        public string SurveyeeGuid { get; set; } // SurveyeeGuid (length: 36)
        public int UserId { get; set; } // UserId
        public string Comment { get; set; } // Comment
        public string Status { get; set; } // Status (length: 10)
        public System.DateTime? Date { get; set; } // Date
    }

    // Surveyee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Surveyee
    {
        public string Title { get; set; } // Title
        public string Code { get; set; } // Code
        public string Description { get; set; } // Description
        public System.DateTime CreatedOn { get; set; } // CreatedOn
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public int? CreatedBy { get; set; } // CreatedBy
        public int? ModifiedBy { get; set; } // ModifiedBy
        public int? DeletedBy { get; set; } // DeletedBy
        public string Status { get; set; } // Status (length: 10)
        public string SurveyeeGuid { get; set; } // SurveyeeGuid (Primary key) (length: 36)

        public Surveyee()
        {
            CreatedOn = System.DateTime.Now;
        }
    }

    // SurveyeeSurveyComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveyeeSurveyComment
    {
        public int CommentId { get; set; } // CommentId (Primary key)
        public int SurveyeeId { get; set; } // SurveyeeId
        public int SurveyId { get; set; } // SurveyId
        public string Comment { get; set; } // Comment
    }

    // SurveySection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveySection
    {
        public int SectionId { get; set; } // SectionId (Primary key)
        public string Code { get; set; } // Code
        public string Title { get; set; } // Title
        public string Description { get; set; } // Description
        public int SurveyId { get; set; } // SurveyId
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Question.FK_dbo.Question_dbo.SurveySection_SectionId

        // Foreign keys
        public virtual Survey Survey { get; set; } // FK_dbo.SurveySection_dbo.Survey_SurveyId

        public SurveySection()
        {
            Questions = new System.Collections.Generic.List<Question>();
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // Tablet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Tablet
    {
        public int TabletId { get; set; } // TabletId (Primary key)
        public string Code { get; set; } // Code
        public string OperatingSystem { get; set; } // OperatingSystem
        public string Description { get; set; } // Description
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<UserTablet> UserTablets { get; set; } // UserTablet.FK_dbo.UserTablet_dbo.Tablet_TabletId

        public Tablet()
        {
            UserTablets = new System.Collections.Generic.List<UserTablet>();
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string FirstName { get; set; } // FirstName
        public string LastName { get; set; } // LastName
        public string Address { get; set; } // Address
        public string Phone { get; set; } // Phone
        public string UserName { get; set; } // UserName
        public string Password { get; set; } // Password
        public System.DateTime LastLoginDate { get; set; } // LastLoginDate
        public int PwdChangeDays { get; set; } // PwdChangeDays
        public int PwdChangeWarningDays { get; set; } // PwdChangeWarningDays
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Role> Roles { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<UserGroup> UserGroups { get; set; } // UserGroup.FK_dbo.UserGroup_dbo.User_UserId
        public virtual System.Collections.Generic.ICollection<UserTablet> UserTablets { get; set; } // UserTablet.FK_dbo.UserTablet_dbo.User_UserId

        public User()
        {
            UserGroups = new System.Collections.Generic.List<UserGroup>();
            UserTablets = new System.Collections.Generic.List<UserTablet>();
            Roles = new System.Collections.Generic.List<Role>();
        }
    }

    // UserGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class UserGroup
    {
        public int UserGroupId { get; set; } // UserGroupId (Primary key)
        public int UserId { get; set; } // UserId
        public int GroupId { get; set; } // GroupId
        public bool IsSuperVisor { get; set; } // IsSuperVisor
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Foreign keys
        public virtual Group Group { get; set; } // FK_dbo.UserGroup_dbo.Group_GroupId
        public virtual User User { get; set; } // FK_dbo.UserGroup_dbo.User_UserId
    }

    // UserTablet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class UserTablet
    {
        public int UserTabletId { get; set; } // UserTabletId (Primary key)
        public int UserId { get; set; } // UserId
        public int TabletId { get; set; } // TabletId
        public string CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public string DeletedBy { get; set; } // DeletedBy
        public System.DateTime? DeletedOn { get; set; } // DeletedOn
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted

        // Foreign keys
        public virtual Tablet Tablet { get; set; } // FK_dbo.UserTablet_dbo.Tablet_TabletId
        public virtual User User { get; set; } // FK_dbo.UserTablet_dbo.User_UserId
    }

    #endregion

    #region POCO Configuration

    // Answer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class AnswerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Answer>
    {
        public AnswerConfiguration()
            : this("dbo")
        {
        }

        public AnswerConfiguration(string schema)
        {
            ToTable("Answer", schema);
            HasKey(x => x.AnswerId);

            Property(x => x.AnswerId).HasColumnName(@"AnswerId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").IsOptional().HasColumnType("int");
            Property(x => x.QuestionOptionId).HasColumnName(@"QuestionOptionId").IsOptional().HasColumnType("int");
            Property(x => x.AnswerValue).HasColumnName(@"AnswerValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsOptional().HasColumnType("bit");
            Property(x => x.Comment).HasColumnName(@"Comment").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SurveyeeGuid).HasColumnName(@"SurveyeeGuid").IsRequired().IsFixedLength().IsUnicode(false).HasColumnType("char").HasMaxLength(36);
            Property(x => x.MatrixColId).HasColumnName(@"MatrixColId").IsOptional().HasColumnType("int");
            Property(x => x.MatrixRowId).HasColumnName(@"MatrixRowId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Question).WithMany(b => b.Answers).HasForeignKey(c => c.QuestionId).WillCascadeOnDelete(false); // FK_Answer_Question
            HasOptional(a => a.QuestionOption).WithMany(b => b.Answers).HasForeignKey(c => c.QuestionOptionId).WillCascadeOnDelete(false); // FK_Answer_QuestionOption
        }
    }

    // AnswerComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class AnswerCommentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AnswerComment>
    {
        public AnswerCommentConfiguration()
            : this("dbo")
        {
        }

        public AnswerCommentConfiguration(string schema)
        {
            ToTable("AnswerComment", schema);
            HasKey(x => x.QuestionCommentId);

            Property(x => x.QuestionCommentId).HasColumnName(@"QuestionCommentId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").IsOptional().HasColumnType("int");
            Property(x => x.Comment).HasColumnName(@"Comment").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SurveyeeGuid).HasColumnName(@"SurveyeeGuid").IsRequired().IsFixedLength().IsUnicode(false).HasColumnType("char").HasMaxLength(36);
        }
    }

    // Group
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class GroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Group>
    {
        public GroupConfiguration()
            : this("dbo")
        {
        }

        public GroupConfiguration(string schema)
        {
            ToTable("Group", schema);
            HasKey(x => x.GroupId);

            Property(x => x.GroupId).HasColumnName(@"GroupId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");
        }
    }

    // GroupSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class GroupSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GroupSurvey>
    {
        public GroupSurveyConfiguration()
            : this("dbo")
        {
        }

        public GroupSurveyConfiguration(string schema)
        {
            ToTable("GroupSurvey", schema);
            HasKey(x => x.GroupSurveyId);

            Property(x => x.GroupSurveyId).HasColumnName(@"GroupSurveyId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.GroupId).HasColumnName(@"GroupId").IsRequired().HasColumnType("int");
            Property(x => x.SurveyId).HasColumnName(@"SurveyId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Group).WithMany(b => b.GroupSurveys).HasForeignKey(c => c.GroupId); // FK_dbo.GroupSurvey_dbo.Group_GroupId
            HasRequired(a => a.Survey).WithMany(b => b.GroupSurveys).HasForeignKey(c => c.SurveyId); // FK_dbo.GroupSurvey_dbo.Survey_SurveyId
        }
    }

    // MatrixCol
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MatrixColConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MatrixCol>
    {
        public MatrixColConfiguration()
            : this("dbo")
        {
        }

        public MatrixColConfiguration(string schema)
        {
            ToTable("MatrixCol", schema);
            HasKey(x => x.ColumnId);

            Property(x => x.ColumnId).HasColumnName(@"ColumnId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ColumnLabel).HasColumnName(@"ColumnLabel").IsOptional().HasColumnType("nvarchar");
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.MatrixCols).HasForeignKey(c => c.QuestionId); // FK_dbo.MatrixCol_dbo.Question_QuestionId
        }
    }

    // MatrixRow
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MatrixRowConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MatrixRow>
    {
        public MatrixRowConfiguration()
            : this("dbo")
        {
        }

        public MatrixRowConfiguration(string schema)
        {
            ToTable("MatrixRow", schema);
            HasKey(x => x.RowId);

            Property(x => x.RowId).HasColumnName(@"RowId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RowLabel).HasColumnName(@"RowLabel").IsOptional().HasColumnType("nvarchar");
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.MatrixRows).HasForeignKey(c => c.QuestionId); // FK_dbo.MatrixRow_dbo.Question_QuestionId
        }
    }

    // MenuItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class MenuItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MenuItem>
    {
        public MenuItemConfiguration()
            : this("dbo")
        {
        }

        public MenuItemConfiguration(string schema)
        {
            ToTable("MenuItem", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Action).HasColumnName(@"Action").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Controller).HasColumnName(@"Controller").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LinkText).HasColumnName(@"LinkText").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModuleId).HasColumnName(@"ModuleId").IsRequired().HasColumnType("int");
            Property(x => x.ParentId).HasColumnName(@"ParentId").IsOptional().HasColumnType("int");
        }
    }

    // OptionChoice
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class OptionChoiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptionChoice>
    {
        public OptionChoiceConfiguration()
            : this("dbo")
        {
        }

        public OptionChoiceConfiguration(string schema)
        {
            ToTable("OptionChoice", schema);
            HasKey(x => x.OptionChoiceId);

            Property(x => x.OptionChoiceId).HasColumnName(@"OptionChoiceId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OptionChoiceLabel).HasColumnName(@"OptionChoiceLabel").IsOptional().HasColumnType("nvarchar");
            Property(x => x.IsDropdown).HasColumnName(@"IsDropdown").IsRequired().HasColumnType("bit");
        }
    }

    // OptionError
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class OptionErrorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptionError>
    {
        public OptionErrorConfiguration()
            : this("dbo")
        {
        }

        public OptionErrorConfiguration(string schema)
        {
            ToTable("OptionError", schema);
            HasKey(x => x.OptionErrorId);

            Property(x => x.OptionErrorId).HasColumnName(@"OptionErrorId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionOptionId).HasColumnName(@"QuestionOptionId").IsRequired().HasColumnType("int");
            Property(x => x.ErrorText).HasColumnName(@"ErrorText").IsOptional().HasColumnType("nvarchar");
        }
    }

    // Organization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class OrganizationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Organization>
    {
        public OrganizationConfiguration()
            : this("dbo")
        {
        }

        public OrganizationConfiguration(string schema)
        {
            ToTable("Organization", schema);
            HasKey(x => x.OrganizationId);

            Property(x => x.OrganizationId).HasColumnName(@"OrganizationId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Logo).HasColumnName(@"Logo").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");
        }
    }

    // PredefinedDropdown
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class PredefinedDropdownConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PredefinedDropdown>
    {
        public PredefinedDropdownConfiguration()
            : this("dbo")
        {
        }

        public PredefinedDropdownConfiguration(string schema)
        {
            ToTable("PredefinedDropdown", schema);
            HasKey(x => x.PredefinedDropdownId);

            Property(x => x.PredefinedDropdownId).HasColumnName(@"PredefinedDropdownId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar");
            Property(x => x.TableName).HasColumnName(@"TableName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ColumnName).HasColumnName(@"ColumnName").IsOptional().HasColumnType("nvarchar");
        }
    }

    // Question
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class QuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Question>
    {
        public QuestionConfiguration()
            : this("dbo")
        {
        }

        public QuestionConfiguration(string schema)
        {
            ToTable("Question", schema);
            HasKey(x => x.QuestionId);

            Property(x => x.QuestionId).HasColumnName(@"QuestionId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PrecedingQuestionId).HasColumnName(@"PrecedingQuestionId").IsRequired().HasColumnType("int");
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar");
            Property(x => x.QuestionText).HasColumnName(@"QuestionText").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Required).HasColumnName(@"Required").IsRequired().HasColumnType("bit");
            Property(x => x.OnlyNumericValue).HasColumnName(@"OnlyNumericValue").IsRequired().HasColumnType("bit");
            Property(x => x.IncludeComment).HasColumnName(@"IncludeComment").IsRequired().HasColumnType("bit");
            Property(x => x.Comment).HasColumnName(@"Comment").IsOptional().HasColumnType("nvarchar");
            Property(x => x.QuestionOrder).HasColumnName(@"QuestionOrder").IsRequired().HasColumnType("int");
            Property(x => x.DependentQuestionId).HasColumnName(@"DependentQuestionId").IsRequired().HasColumnType("int");
            Property(x => x.DependentQuestionOptionId).HasColumnName(@"DependentQuestionOptionId").IsRequired().HasColumnType("int");
            Property(x => x.AllowMultipleChoice).HasColumnName(@"AllowMultipleChoice").IsRequired().HasColumnType("bit");
            Property(x => x.JumpQuestionId).HasColumnName(@"JumpQuestionId").IsRequired().HasColumnType("int");
            Property(x => x.JumpQuestionOptionId).HasColumnName(@"JumpQuestionOptionId").IsRequired().HasColumnType("int");
            Property(x => x.HasPredefinedDropdown).HasColumnName(@"HasPredefinedDropdown").IsRequired().HasColumnType("bit");
            Property(x => x.PredefinedDropdownId).HasColumnName(@"PredefinedDropdownId").IsRequired().HasColumnType("int");
            Property(x => x.SectionId).HasColumnName(@"SectionId").IsRequired().HasColumnType("int");
            Property(x => x.QuestionTypeId).HasColumnName(@"QuestionTypeId").IsRequired().HasColumnType("int");
            Property(x => x.RuleId).HasColumnName(@"RuleId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");
            Property(x => x.IsUpdated).HasColumnName(@"IsUpdated").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.QuestionType).WithMany(b => b.Questions).HasForeignKey(c => c.QuestionTypeId); // FK_dbo.Question_dbo.QuestionType_QuestionTypeId
            HasRequired(a => a.SurveySection).WithMany(b => b.Questions).HasForeignKey(c => c.SectionId); // FK_dbo.Question_dbo.SurveySection_SectionId
        }
    }

    // QuestionOption
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class QuestionOptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionOption>
    {
        public QuestionOptionConfiguration()
            : this("dbo")
        {
        }

        public QuestionOptionConfiguration(string schema)
        {
            ToTable("QuestionOption", schema);
            HasKey(x => x.QuestionOptionId);

            Property(x => x.QuestionOptionId).HasColumnName(@"QuestionOptionId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OptionChoiceLabel).HasColumnName(@"OptionChoiceLabel").IsOptional().HasColumnType("nvarchar");
            Property(x => x.IsDropdown).HasColumnName(@"IsDropdown").IsRequired().HasColumnType("bit");
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.QuestionOptions).HasForeignKey(c => c.QuestionId); // FK_dbo.QuestionOption_dbo.Question_QuestionId
        }
    }

    // QuestionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class QuestionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionType>
    {
        public QuestionTypeConfiguration()
            : this("dbo")
        {
        }

        public QuestionTypeConfiguration(string schema)
        {
            ToTable("QuestionType", schema);
            HasKey(x => x.QuestionTypeId);

            Property(x => x.QuestionTypeId).HasColumnName(@"QuestionTypeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Type).HasColumnName(@"Type").IsOptional().HasColumnType("nvarchar");
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.RoleId);

            Property(x => x.RoleId).HasColumnName(@"RoleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");
            HasMany(t => t.Users).WithMany(t => t.Roles).Map(m =>
            {
                m.ToTable("UserRole", "dbo");
                m.MapLeftKey("RoleId");
                m.MapRightKey("UserId");
            });
        }
    }

    // Rule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class RuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Rule>
    {
        public RuleConfiguration()
            : this("dbo")
        {
        }

        public RuleConfiguration(string schema)
        {
            ToTable("Rule", schema);
            HasKey(x => x.RuleId);

            Property(x => x.RuleId).HasColumnName(@"RuleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
        }
    }

    // Survey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Survey>
    {
        public SurveyConfiguration()
            : this("dbo")
        {
        }

        public SurveyConfiguration(string schema)
        {
            ToTable("Survey", schema);
            HasKey(x => x.SurveyId);

            Property(x => x.SurveyId).HasColumnName(@"SurveyId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UniqueId).HasColumnName(@"UniqueId").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Logo).HasColumnName(@"Logo").IsOptional().HasColumnType("nvarchar");
            Property(x => x.OrganizationId).HasColumnName(@"OrganizationId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Organization).WithMany(b => b.Surveys).HasForeignKey(c => c.OrganizationId); // FK_dbo.Survey_dbo.Organization_OrganizationId
        }
    }

    // SurveyComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveyCommentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SurveyComment>
    {
        public SurveyCommentConfiguration()
            : this("dbo")
        {
        }

        public SurveyCommentConfiguration(string schema)
        {
            ToTable("SurveyComment", schema);
            HasKey(x => x.SurveyCommentsId);

            Property(x => x.SurveyCommentsId).HasColumnName(@"SurveyCommentsId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SurveyeeGuid).HasColumnName(@"SurveyeeGuid").IsRequired().IsFixedLength().IsUnicode(false).HasColumnType("char").HasMaxLength(36);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int");
            Property(x => x.Comment).HasColumnName(@"Comment").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.Status).HasColumnName(@"Status").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.Date).HasColumnName(@"Date").IsOptional().HasColumnType("datetime");
        }
    }

    // Surveyee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveyeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Surveyee>
    {
        public SurveyeeConfiguration()
            : this("dbo")
        {
        }

        public SurveyeeConfiguration(string schema)
        {
            ToTable("Surveyee", schema);
            HasKey(x => x.SurveyeeGuid);

            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("int");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("int");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("int");
            Property(x => x.Status).HasColumnName(@"Status").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.SurveyeeGuid).HasColumnName(@"SurveyeeGuid").IsRequired().IsFixedLength().IsUnicode(false).HasColumnType("char").HasMaxLength(36).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // SurveyeeSurveyComment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveyeeSurveyCommentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SurveyeeSurveyComment>
    {
        public SurveyeeSurveyCommentConfiguration()
            : this("dbo")
        {
        }

        public SurveyeeSurveyCommentConfiguration(string schema)
        {
            ToTable("SurveyeeSurveyComment", schema);
            HasKey(x => x.CommentId);

            Property(x => x.CommentId).HasColumnName(@"CommentId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SurveyeeId).HasColumnName(@"SurveyeeId").IsRequired().HasColumnType("int");
            Property(x => x.SurveyId).HasColumnName(@"SurveyId").IsRequired().HasColumnType("int");
            Property(x => x.Comment).HasColumnName(@"Comment").IsRequired().HasColumnType("nvarchar");
        }
    }

    // SurveySection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SurveySectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SurveySection>
    {
        public SurveySectionConfiguration()
            : this("dbo")
        {
        }

        public SurveySectionConfiguration(string schema)
        {
            ToTable("SurveySection", schema);
            HasKey(x => x.SectionId);

            Property(x => x.SectionId).HasColumnName(@"SectionId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SurveyId).HasColumnName(@"SurveyId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Survey).WithMany(b => b.SurveySections).HasForeignKey(c => c.SurveyId); // FK_dbo.SurveySection_dbo.Survey_SurveyId
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // Tablet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TabletConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Tablet>
    {
        public TabletConfiguration()
            : this("dbo")
        {
        }

        public TabletConfiguration(string schema)
        {
            ToTable("Tablet", schema);
            HasKey(x => x.TabletId);

            Property(x => x.TabletId).HasColumnName(@"TabletId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar");
            Property(x => x.OperatingSystem).HasColumnName(@"OperatingSystem").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LastName).HasColumnName(@"LastName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Address).HasColumnName(@"Address").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Phone).HasColumnName(@"Phone").IsOptional().HasColumnType("nvarchar");
            Property(x => x.UserName).HasColumnName(@"UserName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Password).HasColumnName(@"Password").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").IsRequired().HasColumnType("datetime");
            Property(x => x.PwdChangeDays).HasColumnName(@"PwdChangeDays").IsRequired().HasColumnType("int");
            Property(x => x.PwdChangeWarningDays).HasColumnName(@"PwdChangeWarningDays").IsRequired().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");
        }
    }

    // UserGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class UserGroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserGroup>
    {
        public UserGroupConfiguration()
            : this("dbo")
        {
        }

        public UserGroupConfiguration(string schema)
        {
            ToTable("UserGroup", schema);
            HasKey(x => x.UserGroupId);

            Property(x => x.UserGroupId).HasColumnName(@"UserGroupId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int");
            Property(x => x.GroupId).HasColumnName(@"GroupId").IsRequired().HasColumnType("int");
            Property(x => x.IsSuperVisor).HasColumnName(@"IsSuperVisor").IsRequired().HasColumnType("bit");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Group).WithMany(b => b.UserGroups).HasForeignKey(c => c.GroupId); // FK_dbo.UserGroup_dbo.Group_GroupId
            HasRequired(a => a.User).WithMany(b => b.UserGroups).HasForeignKey(c => c.UserId); // FK_dbo.UserGroup_dbo.User_UserId
        }
    }

    // UserTablet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class UserTabletConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserTablet>
    {
        public UserTabletConfiguration()
            : this("dbo")
        {
        }

        public UserTabletConfiguration(string schema)
        {
            ToTable("UserTablet", schema);
            HasKey(x => x.UserTabletId);

            Property(x => x.UserTabletId).HasColumnName(@"UserTabletId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int");
            Property(x => x.TabletId).HasColumnName(@"TabletId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DeletedOn).HasColumnName(@"DeletedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Tablet).WithMany(b => b.UserTablets).HasForeignKey(c => c.TabletId); // FK_dbo.UserTablet_dbo.Tablet_TabletId
            HasRequired(a => a.User).WithMany(b => b.UserTablets).HasForeignKey(c => c.UserId); // FK_dbo.UserTablet_dbo.User_UserId
        }
    }

    #endregion

}
// </auto-generated>

