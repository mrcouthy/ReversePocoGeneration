// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Callbacks
{

    using System.Linq;

    public class Db : System.Data.Entity.DbContext, IDb
    {
        public System.Data.Entity.DbSet<Car> Car { get; set; } // Car
        public System.Data.Entity.DbSet<Colour> Colour { get; set; } // Colour
        public System.Data.Entity.DbSet<Courses> Courses { get; set; } // Courses
        public System.Data.Entity.DbSet<LiveQuizzes> LiveQuizzes { get; set; } // LiveQuizzes
        public System.Data.Entity.DbSet<OrderErrors> OrderErrors { get; set; } // tblOrderErrors
        public System.Data.Entity.DbSet<OrderErrorsV2> OrderErrorsV2 { get; set; } // tblOrderErrorsAB_
        public System.Data.Entity.DbSet<OrderLines> OrderLines { get; set; } // tblOrderLines
        public System.Data.Entity.DbSet<OrderLinesV2> OrderLinesV2 { get; set; } // AB_OrderLinesAB_
        public System.Data.Entity.DbSet<Orders> Orders { get; set; } // tblOrders
        public System.Data.Entity.DbSet<OrdersV2> OrdersV2 { get; set; } // AB_OrdersAB_
        public System.Data.Entity.DbSet<Symbols> Symbols { get; set; } // Symbols
        public System.Data.Entity.DbSet<Trees> Trees { get; set; } // Treez
        
        static Db()
        {
            System.Data.Entity.Database.SetInitializer<Db>(null);
        }

        public Db()
            : base("Name=callback")
        {
        }

        public Db(string connectionString) : base(connectionString)
        {
        }

        public Db(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CarConfiguration());
            modelBuilder.Configurations.Add(new ColourConfiguration());
            modelBuilder.Configurations.Add(new CoursesConfiguration());
            modelBuilder.Configurations.Add(new LiveQuizzesConfiguration());
            modelBuilder.Configurations.Add(new OrderErrorsConfiguration());
            modelBuilder.Configurations.Add(new OrderErrorsV2Configuration());
            modelBuilder.Configurations.Add(new OrderLinesConfiguration());
            modelBuilder.Configurations.Add(new OrderLinesV2Configuration());
            modelBuilder.Configurations.Add(new OrdersConfiguration());
            modelBuilder.Configurations.Add(new OrdersV2Configuration());
            modelBuilder.Configurations.Add(new SymbolsConfiguration());
            modelBuilder.Configurations.Add(new TreesConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CarConfiguration(schema));
            modelBuilder.Configurations.Add(new ColourConfiguration(schema));
            modelBuilder.Configurations.Add(new CoursesConfiguration(schema));
            modelBuilder.Configurations.Add(new LiveQuizzesConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderErrorsConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderErrorsV2Configuration(schema));
            modelBuilder.Configurations.Add(new OrderLinesConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderLinesV2Configuration(schema));
            modelBuilder.Configurations.Add(new OrdersConfiguration(schema));
            modelBuilder.Configurations.Add(new OrdersV2Configuration(schema));
            modelBuilder.Configurations.Add(new SymbolsConfiguration(schema));
            modelBuilder.Configurations.Add(new TreesConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public OrderDetailsReturnModel OrderDetails(int? orderId)
        {
            var orderIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@order_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = orderId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderId.HasValue)
                orderIdParam.Value = System.DBNull.Value;


            var procResultData = new OrderDetailsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[stp_order_details]";
            cmd.Parameters.Add(orderIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<OrderDetailsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<OrderDetailsReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<OrderDetailsReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

    }
}
// </auto-generated>
