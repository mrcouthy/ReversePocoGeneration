// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace MigrationDemo
{

    using System.Linq;

    public class Db : System.Data.Entity.DbContext, IDb
    {
        public System.Data.Entity.DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; }
        public System.Data.Entity.DbSet<AbOrdersAb> AbOrdersAbs { get; set; }
        public System.Data.Entity.DbSet<EngineerCompany> EngineerCompanies { get; set; }
        public System.Data.Entity.DbSet<EngineerPerson> EngineerPersons { get; set; }
        public System.Data.Entity.DbSet<EngineerPersonBilling> EngineerPersonBillings { get; set; }
        public System.Data.Entity.DbSet<EngineerPersonBillingInfo> EngineerPersonBillingInfoes { get; set; }
        public System.Data.Entity.DbSet<EngineerPersonBillingProcessor> EngineerPersonBillingProcessors { get; set; }
        public System.Data.Entity.DbSet<GetEngineer> GetEngineers { get; set; }
        public System.Data.Entity.DbSet<Symbol> Symbols { get; set; }
        public System.Data.Entity.DbSet<TableWithSpace> TableWithSpaces { get; set; }
        public System.Data.Entity.DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; }
        public System.Data.Entity.DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; }
        public System.Data.Entity.DbSet<TblOrder> TblOrders { get; set; }
        public System.Data.Entity.DbSet<TblOrderError> TblOrderErrors { get; set; }
        public System.Data.Entity.DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; }
        public System.Data.Entity.DbSet<TblOrderLine> TblOrderLines { get; set; }
        
        static Db()
        {
            System.Data.Entity.Database.SetInitializer(new System.Data.Entity.MigrateDatabaseToLatestVersion<Db, MigrationConfiguration>());
        }

        public Db()
            : base("Name=MigrationDemoTest")
        {
        }

        public Db(string connectionString)
            : base(connectionString)
        {
        }

        public Db(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public Db(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public Db(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AbOrderLinesAbConfiguration());
            modelBuilder.Configurations.Add(new AbOrdersAbConfiguration());
            modelBuilder.Configurations.Add(new EngineerCompanyConfiguration());
            modelBuilder.Configurations.Add(new EngineerPersonConfiguration());
            modelBuilder.Configurations.Add(new EngineerPersonBillingConfiguration());
            modelBuilder.Configurations.Add(new EngineerPersonBillingInfoConfiguration());
            modelBuilder.Configurations.Add(new EngineerPersonBillingProcessorConfiguration());
            modelBuilder.Configurations.Add(new GetEngineerConfiguration());
            modelBuilder.Configurations.Add(new SymbolConfiguration());
            modelBuilder.Configurations.Add(new TableWithSpaceConfiguration());
            modelBuilder.Configurations.Add(new TableWithSpaceAndInColumnConfiguration());
            modelBuilder.Configurations.Add(new TableWithSpaceInColumnOnlyConfiguration());
            modelBuilder.Configurations.Add(new TblOrderConfiguration());
            modelBuilder.Configurations.Add(new TblOrderErrorConfiguration());
            modelBuilder.Configurations.Add(new TblOrderErrorsAbConfiguration());
            modelBuilder.Configurations.Add(new TblOrderLineConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AbOrderLinesAbConfiguration(schema));
            modelBuilder.Configurations.Add(new AbOrdersAbConfiguration(schema));
            modelBuilder.Configurations.Add(new EngineerCompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new EngineerPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new EngineerPersonBillingConfiguration(schema));
            modelBuilder.Configurations.Add(new EngineerPersonBillingInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new EngineerPersonBillingProcessorConfiguration(schema));
            modelBuilder.Configurations.Add(new GetEngineerConfiguration(schema));
            modelBuilder.Configurations.Add(new SymbolConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithSpaceConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithSpaceAndInColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithSpaceInColumnOnlyConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderErrorsAbConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderLineConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public int ProcessEngineers()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[process_engineers] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpTestSpaceTest(int? aVal, int? bVal)
        {
            var aValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@a_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = System.DBNull.Value;

            var bValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@b_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp test space test] @a_val, @b_val", aValParam, bValParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal)
        {
            var firstValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@first_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = firstVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!firstVal.HasValue)
                firstValParam.Value = System.DBNull.Value;

            var secondValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@second_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = secondVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!secondVal.HasValue)
                secondValParam.Value = System.DBNull.Value;

            var thirdValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@third_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = thirdVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!thirdVal.HasValue)
                thirdValParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_multiple_multiple_results_with_params] @first_val, @second_val, @third_val", firstValParam, secondValParam, thirdValParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpMultipleResults()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_multiple_results] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpMultipleResultsWithParams(int? firstVal, int? secondVal)
        {
            var firstValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@first_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = firstVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!firstVal.HasValue)
                firstValParam.Value = System.DBNull.Value;

            var secondValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@second_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = secondVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!secondVal.HasValue)
                secondValParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_multiple_results_with_params] @first_val, @second_val", firstValParam, secondValParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpNoParamsTest()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_no_params_test] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpNoReturnFields()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_no_return_fields] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpNullableParamsTest(int? aVal, int? bVal)
        {
            var aValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@a_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = System.DBNull.Value;

            var bValParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@b_val", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_nullable_params_test] @a_val, @b_val", aValParam, bValParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            var strDateFromParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = System.DBNull.Value;

            var strDateToParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@str_date_to", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to", strDateFromParam, strDateToParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
