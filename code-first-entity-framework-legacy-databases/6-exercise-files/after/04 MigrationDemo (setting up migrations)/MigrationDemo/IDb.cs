// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace MigrationDemo
{

    public interface IDb : System.IDisposable
    {
        System.Data.Entity.DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; }
        System.Data.Entity.DbSet<AbOrdersAb> AbOrdersAbs { get; set; }
        System.Data.Entity.DbSet<EngineerCompany> EngineerCompanies { get; set; }
        System.Data.Entity.DbSet<EngineerPerson> EngineerPersons { get; set; }
        System.Data.Entity.DbSet<EngineerPersonBilling> EngineerPersonBillings { get; set; }
        System.Data.Entity.DbSet<EngineerPersonBillingInfo> EngineerPersonBillingInfoes { get; set; }
        System.Data.Entity.DbSet<EngineerPersonBillingProcessor> EngineerPersonBillingProcessors { get; set; }
        System.Data.Entity.DbSet<GetEngineer> GetEngineers { get; set; }
        System.Data.Entity.DbSet<Symbol> Symbols { get; set; }
        System.Data.Entity.DbSet<TableWithSpace> TableWithSpaces { get; set; }
        System.Data.Entity.DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; }
        System.Data.Entity.DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; }
        System.Data.Entity.DbSet<TblOrder> TblOrders { get; set; }
        System.Data.Entity.DbSet<TblOrderError> TblOrderErrors { get; set; }
        System.Data.Entity.DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; }
        System.Data.Entity.DbSet<TblOrderLine> TblOrderLines { get; set; }

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        
        // Stored Procedures
        int ProcessEngineers();
        int StpTestSpaceTest(int? aVal, int? bVal);
        int StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal);
        int StpMultipleResults();
        int StpMultipleResultsWithParams(int? firstVal, int? secondVal);
        int StpNoParamsTest();
        int StpNoReturnFields();
        int StpNullableParamsTest(int? aVal, int? bVal);
        int StpTestUnderscoreTest(string strDateFrom, string strDateTo);
    }

}
// </auto-generated>
